#pragma once
#include <cmath>
#include <math.h>

#include "colorMapping.h"

namespace cons {
	struct color_map_dither : color_map<wchar_t> {
		static const int charmap_count = 497;
		
		float horizontalScale = 0.205f;
		float verticalScale = 2.05f;

		double sampleNormal() {
			double u = ((double) rand() / (RAND_MAX)) * 2 - 1;
			double v = ((double) rand() / (RAND_MAX)) * 2 - 1;
			double r = u * u + v * v;
			r *= horizontalScale;
			if (r == 0 || r > 1) return sampleNormal();
			double c = sqrt(-2 * log(r) / r);
			//return u * c * 8.0f;
			return u * c * verticalScale;
		}

		con_color clip(int val, int max, int min) {
			if (val > max) val = max;
			if (val < min) val = min;
			return con_color(val);
		}

		cpix chco[charmap_count];

		void init() override {
			int clen = characters.length();

			for (int i = 0, b = 0; i < 768; i++) {
				con_color background = ((i / 3) % 256) >> 4;
				con_color foreground = ((i / 3) % 16);
				wchar_t character = characters[i % clen];
				if (background == foreground && character != L' ')
					continue;
				if (background != foreground && character == L' ')
					continue;
				
				chco[b].ch = character;
				chco[b++].co = foreground | background << 4;
			}
			
			have_table = true;
		}

		cpix getCpix(pixel &pix) override {
			cpix c;
			getDitherColored(pix.r, pix.g, pix.b, &c.ch, &c.co);
			return c;
		}

		void getDitherColored(con_color r, con_color g, con_color b, wchar_t *ch, con_color *color) {
			struct character_map {
				con_color r, g, b;
			} const characterMap[charmap_count]=	
				{{0,0,0},
				{0,0,32},
				{0,0,64},
				{0,32,0},
				{0,64,0},
				{32,32,0},
				{64,64,0},
				{32,0,0},
				{64,0,0},
				{32,0,32},
				{64,0,64},
				{0,32,32},
				{0,64,64},
				{48,48,48},
				{96,96,96},
				{32,32,32},
				{64,64,64},
				{0,0,64},
				{0,0,128},
				{0,64,0},
				{0,128,0},
				{64,64,0},
				{128,128,0},
				{64,0,0},
				{128,0,0},
				{64,0,64},
				{128,0,128},
				{0,64,64},
				{0,128,128},
				{64,64,64},
				{128,128,128},
				{0,0,96},
				{0,0,64},
				{0,0,128},
				{0,32,96},
				{0,64,64},
				{32,32,96},
				{64,64,64},
				{32,0,96},
				{64,0,64},
				{32,0,128},
				{64,0,128},
				{0,32,128},
				{0,64,128},
				{48,48,144},
				{96,96,160},
				{32,32,128},
				{64,64,128},
				{0,0,160},
				{0,0,191},
				{0,64,96},
				{0,128,64},
				{64,64,96},
				{128,128,64},
				{64,0,96},
				{128,0,64},
				{64,0,160},
				{128,0,191},
				{0,64,160},
				{0,128,191},
				{64,64,160},
				{128,128,191},
				{0,96,0},
				{0,64,0},
				{0,96,32},
				{0,64,64},
				{0,128,0},
				{32,128,0},
				{64,128,0},
				{32,96,0},
				{64,64,0},
				{32,96,32},
				{64,64,64},
				{0,128,32},
				{0,128,64},
				{48,144,48},
				{96,160,96},
				{32,128,32},
				{64,128,64},
				{0,96,64},
				{0,64,128},
				{0,160,0},
				{0,191,0},
				{64,160,0},
				{128,191,0},
				{64,96,0},
				{128,64,0},
				{64,96,64},
				{128,64,128},
				{0,160,64},
				{0,191,128},
				{64,160,64},
				{128,191,128},
				{96,96,0},
				{64,64,0},
				{96,96,32},
				{64,64,64},
				{96,128,0},
				{64,128,0},
				{128,128,0},
				{128,96,0},
				{128,64,0},
				{128,96,32},
				{128,64,64},
				{96,128,32},
				{64,128,64},
				{144,144,48},
				{160,160,96},
				{128,128,32},
				{128,128,64},
				{96,96,64},
				{64,64,128},
				{96,160,0},
				{64,191,0},
				{160,160,0},
				{191,191,0},
				{160,96,0},
				{191,64,0},
				{160,96,64},
				{191,64,128},
				{96,160,64},
				{64,191,128},
				{160,160,64},
				{191,191,128},
				{96,0,0},
				{64,0,0},
				{96,0,32},
				{64,0,64},
				{96,32,0},
				{64,64,0},
				{128,32,0},
				{128,64,0},
				{128,0,0},
				{128,0,32},
				{128,0,64},
				{96,32,32},
				{64,64,64},
				{144,48,48},
				{160,96,96},
				{128,32,32},
				{128,64,64},
				{96,0,64},
				{64,0,128},
				{96,64,0},
				{64,128,0},
				{160,64,0},
				{191,128,0},
				{160,0,0},
				{191,0,0},
				{160,0,64},
				{191,0,128},
				{96,64,64},
				{64,128,128},
				{160,64,64},
				{191,128,128},
				{96,0,96},
				{64,0,64},
				{96,0,128},
				{64,0,128},
				{96,32,96},
				{64,64,64},
				{128,32,96},
				{128,64,64},
				{128,0,96},
				{128,0,64},
				{128,0,128},
				{96,32,128},
				{64,64,128},
				{144,48,144},
				{160,96,160},
				{128,32,128},
				{128,64,128},
				{96,0,160},
				{64,0,191},
				{96,64,96},
				{64,128,64},
				{160,64,96},
				{191,128,64},
				{160,0,96},
				{191,0,64},
				{160,0,160},
				{191,0,191},
				{96,64,160},
				{64,128,191},
				{160,64,160},
				{191,128,191},
				{0,96,96},
				{0,64,64},
				{0,96,128},
				{0,64,128},
				{0,128,96},
				{0,128,64},
				{32,128,96},
				{64,128,64},
				{32,96,96},
				{64,64,64},
				{32,96,128},
				{64,64,128},
				{0,128,128},
				{48,144,144},
				{96,160,160},
				{32,128,128},
				{64,128,128},
				{0,96,160},
				{0,64,191},
				{0,160,96},
				{0,191,64},
				{64,160,96},
				{128,191,64},
				{64,96,96},
				{128,64,64},
				{64,96,160},
				{128,64,191},
				{0,160,160},
				{0,191,191},
				{64,160,160},
				{128,191,191},
				{144,144,144},
				{96,96,96},
				{144,144,176},
				{96,96,160},
				{144,176,144},
				{96,160,96},
				{176,176,144},
				{160,160,96},
				{176,144,144},
				{160,96,96},
				{176,144,176},
				{160,96,160},
				{144,176,176},
				{96,160,160},
				{192,192,192},
				{176,176,176},
				{160,160,160},
				{144,144,208},
				{96,96,224},
				{144,208,144},
				{96,224,96},
				{208,208,144},
				{224,224,96},
				{208,144,144},
				{224,96,96},
				{208,144,208},
				{224,96,224},
				{144,208,208},
				{96,224,224},
				{208,208,208},
				{224,224,224},
				{96,96,96},
				{64,64,64},
				{96,96,128},
				{64,64,128},
				{96,128,96},
				{64,128,64},
				{128,128,96},
				{128,128,64},
				{128,96,96},
				{128,64,64},
				{128,96,128},
				{128,64,128},
				{96,128,128},
				{64,128,128},
				{144,144,144},
				{160,160,160},
				{128,128,128},
				{96,96,160},
				{64,64,191},
				{96,160,96},
				{64,191,64},
				{160,160,96},
				{191,191,64},
				{160,96,96},
				{191,64,64},
				{160,96,160},
				{191,64,191},
				{96,160,160},
				{64,191,191},
				{160,160,160},
				{191,191,191},
				{0,0,191},
				{0,0,128},
				{0,0,223},
				{0,0,192},
				{0,32,191},
				{0,64,128},
				{32,32,191},
				{64,64,128},
				{32,0,191},
				{64,0,128},
				{32,0,223},
				{64,0,192},
				{0,32,223},
				{0,64,192},
				{48,48,239},
				{96,96,224},
				{32,32,223},
				{64,64,192},
				{0,0,255},
				{0,64,191},
				{0,128,128},
				{64,64,191},
				{128,128,128},
				{64,0,191},
				{128,0,128},
				{64,0,255},
				{128,0,255},
				{0,64,255},
				{0,128,255},
				{64,64,255},
				{128,128,255},
				{0,191,0},
				{0,128,0},
				{0,191,32},
				{0,128,64},
				{0,223,0},
				{0,192,0},
				{32,223,0},
				{64,192,0},
				{32,191,0},
				{64,128,0},
				{32,191,32},
				{64,128,64},
				{0,223,32},
				{0,192,64},
				{48,239,48},
				{96,224,96},
				{32,223,32},
				{64,192,64},
				{0,191,64},
				{0,128,128},
				{0,255,0},
				{64,255,0},
				{128,255,0},
				{64,191,0},
				{128,128,0},
				{64,191,64},
				{128,128,128},
				{0,255,64},
				{0,255,128},
				{64,255,64},
				{128,255,128},
				{191,191,0},
				{128,128,0},
				{191,191,32},
				{128,128,64},
				{191,223,0},
				{128,192,0},
				{223,223,0},
				{192,192,0},
				{223,191,0},
				{192,128,0},
				{223,191,32},
				{192,128,64},
				{191,223,32},
				{128,192,64},
				{239,239,48},
				{224,224,96},
				{223,223,32},
				{192,192,64},
				{191,191,64},
				{128,128,128},
				{191,255,0},
				{128,255,0},
				{255,255,0},
				{255,191,0},
				{255,128,0},
				{255,191,64},
				{255,128,128},
				{191,255,64},
				{128,255,128},
				{255,255,64},
				{255,255,128},
				{191,0,0},
				{128,0,0},
				{191,0,32},
				{128,0,64},
				{191,32,0},
				{128,64,0},
				{223,32,0},
				{192,64,0},
				{223,0,0},
				{192,0,0},
				{223,0,32},
				{192,0,64},
				{191,32,32},
				{128,64,64},
				{239,48,48},
				{224,96,96},
				{223,32,32},
				{192,64,64},
				{191,0,64},
				{128,0,128},
				{191,64,0},
				{128,128,0},
				{255,64,0},
				{255,128,0},
				{255,0,0},
				{255,0,64},
				{255,0,128},
				{191,64,64},
				{128,128,128},
				{255,64,64},
				{255,128,128},
				{191,0,191},
				{128,0,128},
				{191,0,223},
				{128,0,192},
				{191,32,191},
				{128,64,128},
				{223,32,191},
				{192,64,128},
				{223,0,191},
				{192,0,128},
				{223,0,223},
				{192,0,192},
				{191,32,223},
				{128,64,192},
				{239,48,239},
				{224,96,224},
				{223,32,223},
				{192,64,192},
				{191,0,255},
				{128,0,255},
				{191,64,191},
				{128,128,128},
				{255,64,191},
				{255,128,128},
				{255,0,191},
				{255,0,128},
				{255,0,255},
				{191,64,255},
				{128,128,255},
				{255,64,255},
				{255,128,255},
				{0,191,191},
				{0,128,128},
				{0,191,223},
				{0,128,192},
				{0,223,191},
				{0,192,128},
				{32,223,191},
				{64,192,128},
				{32,191,191},
				{64,128,128},
				{32,191,223},
				{64,128,192},
				{0,223,223},
				{0,192,192},
				{48,239,239},
				{96,224,224},
				{32,223,223},
				{64,192,192},
				{0,191,255},
				{0,128,255},
				{0,255,191},
				{0,255,128},
				{64,255,191},
				{128,255,128},
				{64,191,191},
				{128,128,128},
				{64,191,255},
				{128,128,255},
				{0,255,255},
				{64,255,255},
				{128,255,255},
				{191,191,191},
				{128,128,128},
				{191,191,223},
				{128,128,192},
				{191,223,191},
				{128,192,128},
				{223,223,191},
				{192,192,128},
				{223,191,191},
				{192,128,128},
				{223,191,223},
				{192,128,192},
				{191,223,223},
				{128,192,192},
				{239,239,239},
				{224,224,224},
				{223,223,223},
				{192,192,192},
				{191,191,255},
				{128,128,255},
				{191,255,191},
				{128,255,128},
				{255,255,191},
				{255,255,128},
				{255,191,191},
				{255,128,128},
				{255,191,255},
				{255,128,255},
				{191,255,255},
				{128,255,255},
				{255,255,255}};
			
			int nearest_index = 0;

			//int randomizer = (((rand() % 200) - 100) * 0.2f);
			float randomizer = sampleNormal();

			con_color cr = characterMap[0].r;
			con_color cg = characterMap[0].g;
			con_color cb = characterMap[0].b;
			int nearest_value = ((cr - r) * (cr - r)) +
								((cg - g) * (cg - g)) +
								((cb - b) * (cb - b));

			float dr = (int(r) % 16)-8;
			float dg = (int(g) % 16)-8;
			float db = (int(b) % 16)-8;
			float colordeviance = 1.0f-(1.0f/(((dr - r) * (dr - r)) + ((dg - g) * (dg - g)) + ((db - b) * (db - b))));
			colordeviance = powf(colordeviance, 3.0f);
			//float colordeviance = 0;
			//float cdr = dr / 2.0f;
			//float cdg = dg / 2.0f;
			//float cdb = db / 2.0f;
			float cdr = colordeviance, cdg = colordeviance, cdb = colordeviance;
			//cdr *= -cdr; cdg *= -cdg; cdb *= -cdb;

			for (int i = 0; i < charmap_count; i++) {

				con_color cr = clip(characterMap[i].r + int(randomizer * cdr), 255, 0);
				con_color cg = clip(characterMap[i].g + int(randomizer * cdg), 255, 0);
				con_color cb = clip(characterMap[i].b + int(randomizer * cdb), 255, 0);
				int distance = ((cr - r) * (cr - r)) +
									((cg - g) * (cg - g)) +
									((cb - b) * (cb - b));

				if (distance < nearest_value) {
					nearest_index = i;
					nearest_value = distance;
					if (distance < 16)
						break;
				}
			}

			if (have_table) {
				*ch = chco[nearest_index].ch;
				*color = chco[nearest_index].co;
				return;
			} else {
				for (int i = 0, b = 0; i < 768; i++) {
					con_color background = ((i / 3) % 256) >> 4;
					con_color foreground = ((i / 3) % 16);
					wchar_t character = characters[i % 3];
					if (background == foreground && character != L' ')
						continue;
					if (background != foreground && character == L' ')
						continue;
					
					if (b++ == nearest_index) {
						*ch = character;
						*color = foreground | background << 4;
						return;
					}		
				}
			}

			*ch = ' ';
			*color = 0;//FBLACK | BBLACK;		
			return;
		}
	};
}